name: Build and Release Tauri App

on:
  push:
    branches:
      - production

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-13          # Intel runner
            target: x86_64-apple-darwin
          - os: macos-14          # Apple Silicon runner
            target: aarch64-apple-darwin
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}   # NOTE: "targets" (plural) fixes missing stdlib error

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: brew update || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20          # LTS, fewer gradle warnings than v22

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Install app dependencies
        run: pnpm install

      - name: Build API types package
        run: pnpm build:api

      - name: Build Tauri app
        run: pnpm run build:tauri:prod -- --target ${{ matrix.target }}

      # ─── Upload artifacts ─────────────────────────────────────────────┐
      - name: Upload Windows Portable EXE
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-windows-exe
          path: packages/tauri-app/src-tauri/target/${{ matrix.target }}/release/*.exe

      - name: Upload Windows NSIS Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-windows-nsis
          path: packages/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.exe

      - name: Upload Windows MSI Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-windows-msi
          path: packages/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi

      - name: Upload macOS DMG
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-macos-dmg-${{ matrix.target }}
          path: packages/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload Linux AppImage
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-linux-appimage
          path: packages/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  # ─────────────────────────────── Android build ────────────────────────
  build-android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Install Android dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk unzip wget
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O android-tools.zip
          sudo mkdir -p /opt/android-sdk/cmdline-tools/cmdline-tools
          sudo unzip -q android-tools.zip -d /opt/android-sdk/cmdline-tools
          sudo mv /opt/android-sdk/cmdline-tools/cmdline-tools /opt/android-sdk/cmdline-tools/latest
          echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
          # add cmdline-tools to PATH for current shell as well
          export PATH="/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:$PATH"
          echo "/opt/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "/opt/android-sdk/platform-tools" >> $GITHUB_PATH

          # accept licenses and install required packages
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses > /dev/null || true
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platforms;android-33" "build-tools;33.0.0" "platform-tools" --sdk_root="$ANDROID_SDK_ROOT" --licenses > /dev/null || true
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platforms;android-33" "build-tools;33.0.0" "platform-tools"

      - name: Check Android SDK installation
        run: |
          echo "ANDROID_SDK_ROOT is: $ANDROID_SDK_ROOT"
          echo "PATH is: $PATH"
          ls -la $ANDROID_SDK_ROOT/platforms
          if [ ! -d "$ANDROID_SDK_ROOT/platforms/android-33" ]; then
            echo "Android SDK platform 33 not properly installed"
            ls -R $ANDROID_SDK_ROOT
            exit 1
          fi
          adb version || echo "adb not found, but may not be critical for build"

      - name: Install Rust stable and Android targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi
          components: rust-src

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Install app dependencies
        run: pnpm install

      - name: Build API types package
        run: pnpm build:api

      - name: Build Tauri Android app
        env:
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: pnpm tauri android build --release

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-android
          path: packages/tauri-app/src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk

  # ─────────────────────────────── Release job ──────────────────────────
  release:
    needs: [build, build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts for debugging
        run: ls -R artifacts

      - name: Get package.json version
        id: package_version
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Create Release on Public Repository
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          repository: KimuSoft/muvel-public
          files: |
            artifacts/tauri-app-windows-exe/*.exe
            artifacts/tauri-app-windows-nsis/*-setup.exe
            artifacts/tauri-app-windows-msi/*.msi
            artifacts/tauri-app-macos-dmg-x86_64-apple-darwin/*.dmg
            artifacts/tauri-app-macos-dmg-aarch64-apple-darwin/*.dmg
            artifacts/tauri-app-linux-appimage/*.AppImage
            artifacts/tauri-app-android/*.apk
          tag_name: v${{ steps.package_version.outputs.PACKAGE_VERSION }}
          name: "v${{ steps.package_version.outputs.PACKAGE_VERSION }}"
          body: |
            자동 빌드된 Tauri 앱입니다.
            production 브랜치 푸시 시 자동 릴리스.
            package.json 버전: ${{ steps.package_version.outputs.PACKAGE_VERSION }}
          draft: false
          prerelease: false
